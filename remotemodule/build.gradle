import org.apache.tools.ant.taskdefs.condition.Os

plugins {
    id 'com.android.library'
    id 'org.jetbrains.kotlin.android'
    id("maven-publish")
}

android {
    compileSdk 32

    namespace "fm.dice.remotemodule"

    defaultConfig {
        minSdk 28
        targetSdk 32
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    publishing {
        singleVariant("release")
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

dependencies {

    implementation 'androidx.core:core-ktx:1.7.0'
    implementation 'androidx.appcompat:appcompat:1.5.1'
    implementation 'com.google.android.material:material:1.6.1'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
}

def getStringFromSecureStorage(String account, String service) {
    if (Os.isFamily(Os.FAMILY_MAC)) {
        def stdout = new ByteArrayOutputStream()
        def stderr = new ByteArrayOutputStream()
        def executable = 'security'
        def arguments = ['-q', 'find-generic-password', '-a', account, '-s', service, '-w']
        exec {
            commandLine executable
            args arguments
            standardOutput = stdout
            errorOutput = stderr
            ignoreExitValue true
        }
        //noinspection GroovyAssignabilityCheck
        return stdout.toString().trim()
    } else {
        return null
    }
}

private Properties getKeystoreProperties() {
    def keystorePropertiesFile = new File(gradle.gradleUserHomeDir, "dice_keystore.properties")
    def keystoreProperties = new Properties()
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
    keystoreProperties
}

afterEvaluate {
    publishing {
        repositories {
            maven {
                name = "GitHubPackages"
                url = uri("https://maven.pkg.github.com/alasdairhall/module")
                credentials {
                    def keystoreProperties = getKeystoreProperties()
                    def user = keystoreProperties.getProperty("gpr.user")
                    def service = keystoreProperties.getProperty("gpr.service")
                    username = user ?: System.getenv("PACKAGES_ACCESS_USER")
                    password = getStringFromSecureStorage(user, service) ?: System.getenv("PACKAGES_ACCESS_TOKEN")
                }
            }
        }
        publications {
            gpr(MavenPublication) {
                groupId = "fm.dice"
                artifactId = "remotemodule"
                version = "0.0.6-SNAPSHOT"
                from components.release
            }
        }
    }
}
